################################################################
# Global configuration
################################################################
#
# port = 8080
#
# SSL certificate and key used
#
# Optional
#
# [tls]
#   port = 8433
#   redirect = true
#   CertFile = "janus.crt"
#   KeyFile = "janus.key"
#
# Enable debug mode
#
# Optional
# Default: false
#
# debug = true
#
# Timeout in seconds.
# Duration to give active requests a chance to finish during hot-reloads
#
# Optional
# Default: 10
#
# graceTimeOut = 10
# If non-zero, controls the maximum idle (keep-alive) to keep per-host.  If zero, DefaultMaxIdleConnsPerHost is used.
# If you encounter 'too many open files' errors, you can either change this value, or change `ulimit` value.
#
# Optional
# Default: http.DefaultMaxIdleConnsPerHost
# MaxIdleConnsPerHost = 200
#
# Flush interval for upgraded Proxy connections.
# Optional
# BackendFlushInterval = 0
#
# Defines the maximum amount of time an idle (keep-alive) connection will remain idle before closing itself.
# Optional
# Default: "90s"
#
# IdleConnTimeout = "90s"
#
# Defines if Janus should create a X-Request-Id
# Optional
# Default: true
# RequestID = true

#[respondingTimeouts]
# readTimeout is the maximum duration for reading the entire request, including the body.
#
# Optional
# Default: "0s"
#
# readTimeout = "5s"

# writeTimeout is the maximum duration before timing out writes of the response.
#
# Optional
# Default: "0s"
#
# writeTimeout = "5s"

# idleTimeout is the maximum duration an idle (keep-alive) connection will remain idle before closing itself.
#
# Optional
# Default: "180s"
#
# idleTimeout = "360s"

################################################################
# Clustering
################################################################
# [cluster]
#  UpdateFrequency = "5s"

################################################################
# Logging
################################################################
# Configure Janus logging
# See https://github.com/hellofresh/logging-go for complete documentation
#[log]
#    level = "info"
#    format = "json"
#    writer = "stderr"

################################################################
# Management API configuration backend
################################################################
[web]
# port = 8081

# SSL certificate and key used
#
# Optional
  # [web.tls]
  #   port = 8444
  #   redirect = true
  #   CertFile = "janus.crt"
  #   KeyFile = "janus.key"
#
# Basic JWT configuration
#
# Required
#
  [web.credentials]
    # The algorithm that you want to use to create your JWT
    algorithm = "HS256"
    # This is the secret that you will use to encrypt your JWT
    secret = "secret key"
    # This is the duration before the issued administration token expires
    # timeout = "1h"

    # [web.credentials.github]
    # organizations = ["yourOrganization"]
    # teams = {yourOrganization = "devs"}

    # [web.credentials.basic]
    # users = {admin = "admin"}

################################################################
# Metrics
################################################################
# To enable Janus to export internal metrics to Statsd
#[stats]
#    dsn = "statsd:8125"
#    prefix = "sandbox.janus."

################################################################
# Proxy Definition Database
################################################################
# You can choose to use `mongodb` or `file based` databases to store your
# API definition configuration.
#
# WARNING, if you use Janus in Docker, you have 2 options:
#  - create a file on your host and mount it as a volume
#      storageFile = "acme.json"
#      $ docker run -v "/my/host/janus" janus
#  - mount the folder containing the file as a volume
#      dsn = "file:///etc/janus"
#      $ docker run -v "/my/host/acme:/etc/janus" janus
#
# Required
#
# [database]
#   dsn = "file:///etc/janus"
#
# If you want to use mongodb enable this
# [database]
#   dsn = "mongodb://janus-database:27017/janus"

################################################################
# Distributed Tracing
################################################################
#
# [tracing]
# provider = "jaeger"
# Google Clooud Platform - Stackdriver Trace
  # [tracing.googleCloud]
  #   projectID = ""
  #   email = ""
  #   privateKey = ""
  #   privateKeyID = ""

# Jeager Distributed Tracing
  # [tracing.jaeger]
    # SamplingServerURL is the address of jaeger-agent's HTTP sampling server
    #
    # Default: "http://localhost:5778/sampling"
    #
    # SamplingServerURL = "localhost:6832"

    # Sampling Type specifies the type of the sampler: const, probabilistic, rateLimiting
    #
    # Default: "const"
    #
    # SamplingType = "const"

    # SamplingParam Param is a value passed to the sampler.
    # Valid values for Param field are:
    #   - for "const" sampler, 0 or 1 for always false/true respectively
    #   - for "probabilistic" sampler, a probability between 0 and 1
    #   - for "rateLimiting" sampler, the number of spans per second
    #
    # Default: 1.0
    #
    # SamplingParam = 1.0

    # BufferFlushInterval controls how often the buffer is force-flushed, even if it's not full.
    # It is generally not useful, as it only matters for very low traffic services.
    #
    # Default: 1s
    #
    # BufferFlushInterval = "1s"

    # LogSpans, when true, enables LoggingReporter that runs in parallel with the main reporter
    # and logs all submitted spans. Main Configuration.Logger must be initialized in the code
    # for this option to have any effect.
    #
    # Default: false
    #
    # LogSpans = false

    # QueueSize controls how many spans the reporter can keep in memory before it starts dropping
	  # new spans. The queue is continuously drained by a background go-routine, as fast as spans
	  # can be sent out of process.
    #
    # Default: 0
    #
    # QueueSize = 0
